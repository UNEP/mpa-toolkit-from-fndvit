@use "sass:math";
@use "sass:meta";
@use "sass:list";
@use "sass:string";

@function strip-unit($number) {
  @return math.div($number, ($number * 0 + 1));
}

@function get-unit($value) {
  @return str-slice($value * 0 + "", 2, -1);
}

@function is-unit($value, $unit) {
  $_unit: get-unit($value);
  @return $_unit == $unit;
}

@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
      @warn '#{ $number } is not a number.';
      @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
      @warn '#{ $digits } is not a number.';
      @return $number;
  } @else if not unitless($digits) {
      @warn '#{ $digits } has a unit.';
      @return $number;
  }
  @for $i from 1 through $digits {
      $n: $n * 10;
  }
  @if $mode == round {
      @return calc(round($number * $n) / $n);
  } @else if $mode == ceil {
      @return calc(ceil($number * $n) / $n);
  } @else if $mode == floor {
      @return calc(floor($number * $n) / $n);
  } @else {
      @warn '#{ $mode } is undefined keyword.';
      @return $number;
  }
}

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == '.') {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  @return if($minus, -$result, $result);;
}

@function to-unit($value) {

  @if type-of($value) != 'string' {
    $value: #{$value}; // ensure string
    //   @error 'Value for `to-unit` should be a string.';
  }

  $units: (
    'px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'fr': 1fr,
    'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax
  );
  $parsed-unit: false;

  @each $unit in $units {
    // $unit is a pair of ['px': 1px] (item in $units)

    @if (not $parsed-unit and str-index($value, nth($unit, 1))) {
      $parsed-unit: nth($unit, 2);
    }
  }

  @if (not $parsed-unit) {
    @error 'Invalid unit `#{$value}`.';
  }

  @return $parsed-unit;
}

@function to-number-with-unit($val) {
  @return to-number($val) * to-unit($val);
}

@function to-px-val($val) {
  @if meta.type-of($val) == 'string' and string.slice($val, 1, 6) == 'minmax' {
    $val: string.slice($val, 8, string.index($val, ',') - 1);
  }
  $num: to-number(#{$val});
  $unit: to-unit($val);
  @if ($unit == 1px)      { @return $num * $unit; }
  @else if ($unit == 1fr) { @return 0; }
  @else { @error '`Unsupported unit #{$unit}`'; }
}

@function calc-grid-min-width($track-list) {
  $total: 0;
  @for $i from 1 through list.length($track-list) {
    $str: list.nth($track-list, $i);
    $val: to-px-val($str);
    $total: $total + $val;
  }
  @return $total;
}
